%% Add path
addpath('../..')
%% Clear variables
clear all
close all
%% Step01 Load experiment configuration from file
expFilePath = '../raw_data/test-data/results/experiment_test-data.mat'
foo = load(expFilePath);
myexp = foo.self;
disp(myexp.expInfo)
%% Step02 (optional) Sepcify options for opening a trial
myexp.roiDir = myexp.getDefaultDir('roi');

myexp.loadFileType = 'binned';
myexp.trialOptionRaw = struct('process',true,...
                              'noSignalWindow',[1 6],...
                              'intensityOffset',-30);
myexp.trialOptionBinned = struct('process',false,...
                                 'noSignalWindow',[],...
                                 'intensityOffset',-10);

myexp.responseOption = struct('offset',-10,...
                        'fZeroWindow',[12 15],...
                        'responseWindow',[19 22]);
myexp.responseMaxOption = struct('offset',-10,...
                           'fZeroWindow',[12 15],...
                           'slidingWindowSize',3);
myexp.mapsAfterLoading = {'response','responseMax'};
% myexp.mapsAfterLoading = {};

myexp.alignToTemplate = true;
%% Step03 Open neuRoi GUI
myexp.planeNum = 1;
mycon = NrController(myexp);
% Change some parameters if you like
myexp.mapsAfterLoading = {};

%% (Ignore when testing) Add local correlation
mapType = 'localCorrelation';
mapOption = struct('tileSize',8);
trial = myexp.getCurrentTrial();
trial.calculateAndAddNewMap(mapType,mapOption);

%% (Ignore when testing) Copy ROI
trial = myexp.getCurrentTrial();
idx = trial.findRoiByTag(trial.selectedRoiTagArray(1))
roiClipboard = trial.roiArray(idx)

%% (Ignore when testing) Paste ROI
trial = myexp.getCurrentTrial();
trial.addRoi(roiClipboard);

%% (Ignore when testing) Remove very small ROIs generated by false clicking
%% Delete point ROIs
%% Delete ROIs with only one point
% Get current trial
trial = myexp.getCurrentTrial();
roiArray = trial.roiArray;
deleteTagArray = {};
for k = 1:length(roiArray)
    roi = roiArray(k);
    if size(roi.position,1)<2
        deleteTagArray{end+1} = roi.tag;
    end
end
% Delete point ROIs
for k=1:length(deleteTagArray)
    tag = deleteTagArray{k};
    trial.deleteRoi(tag);
end
%% (Ignore when testing) Get trial table
trialTable = batch.getTrialTable(myexp.rawFileList,myexp.expInfo.odorList);
% [table((1:height(trialTable))'),trialTable]
deleteTidx = [4,16,23];%[4, 11,19];
trialTable(deleteTidx,:) = [];
trialTable = batch.addTrialNum(trialTable);
fileIdx = trialTable.fileIdx;

%% Step04 Extract time trace with template ROI in all trials
% Apply template ROI map and correct ROIs in each trial
% If you accidentally closed the GUI, the following code might
% throw an error. In that case, just run Step01, then continue with
% Step04

% options for loading raw data
myexp.alignToTemplate = true;
% If you want to subtract then resonance scanning noise pattern,
% set 'process' option as true
myexp.trialOptionRaw = struct('process',true,...
                              'noSignalWindow',[1 6],...
                              'motionCorr',true,'motionCorrDir',motionCorrDir);
%%XXXX

% Indices of files for time trace extraction
fileIdxList = 1:length(myexp.rawFileList);

% Plane number, 3 means the third plane
planeNum = 3;
planeString = NrModel.getPlaneString(planeNum);

% File paths to ROI maps
roiIdxList = repmat(1,1,length(fileIdxList));
prefix = 'binned_x1y1z2_';
appendix = '_RoiArray';
roiFileNameList = cellfun(@(x) iopath.modifyFileName(x,prefix,appendix,'mat'),myexp.rawFileList(roiIdxList),'UniformOutput',false);
roiFileList = cellfun(@(x) fullfile(myexp.roiDir,planeString,x), ...
                      roiFileNameList,'UniformOutput',false);


% Extract time traces and save
plotTrace = true;
myexp.extractTimeTraceBatch(fileIdxList, ...
                            roiFileList,planeNum, ...
                            plotTrace);
%% Step05 (Ignore when testing) Save a sorted time trace list for further
%% processing by Python
fileNameArray = myexp.rawFileList(fileIdxList);
planeNum = 3;
planeString = NrModel.getPlaneString(planeNum);
traceResultDir = fullfile(myexp.resultDir,'time_trace', ...
                          planeString);

% Sort file names by odor
nTrialPerOdor = 3;
odorList = myexp.expInfo.odorList
[fileNameArraySorted,odorArraySorted] = shortcut.sortFileNameArray(fileNameArray,'odor',odorList);
% Load time trace matrices
traceResultArray = struct('timeTraceMat',{},'roiArray',{},...
                          'roiFilePath',{},'rawFilePath',{});
appendix = sprintf('_frame%dtoInfby4',planeNum);
for k=1:length(fileNameArraySorted)
    fileName = fileNameArraySorted{k};
    timeTraceFilePath = shortcut.getTimeTraceFilePath(traceResultDir,fileName,appendix);
    foo = load(timeTraceFilePath);
    traceResultArray(k) = foo.traceResult;
end

% Keep only the ROIs that appear in all trials
[commonRoiTagArray,timeTraceMatList,idxMat] = ...
    analysis.findCommonRoi(traceResultArray,'removePointRoi', true);

% Save time trace
timeTraceDataFilePath = fullfile(traceResultDir, ...
                           'timetrace.mat');
save(timeTraceDataFilePath,'timeTraceMatList','odorArraySorted','odorList')



